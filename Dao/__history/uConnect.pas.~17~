unit uConnect;

interface

uses UResponse,

  FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.MySQLDef,
  FireDAC.VCLUI.Wait, FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf,
  FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  FireDAC.Comp.UI, FireDAC.Phys.MySQL, inifiles, system.SysUtils;


type

 Tconnect = class

    private

    Connection : TFDConnection;
    FDPhysMySQLDriverLink : TFDPhysMySQLDriverLink;
    FDGUIxWaitCursor: TFDGUIxWaitCursor;
    FQuery: TFdQuery;
    procedure SetQuery(const Value: TFdQuery);


    public

     property  Query : TFdQuery read FQuery write SetQuery;

    function ExecSql(sql: string) : Response;


     constructor Create;
   destructor destroy;override;

 end;

implementation

{ Tconnect }

constructor Tconnect.Create;
var
 Diretorio, server, user, database, password, driver, pathDll, Port : string;
 ArquivoIni : Tinifile;
begin




  Diretorio   := ExtractFileDir(GetCurrentDir);
  ArquivoIni  := TInifile.Create(diretorio +'\configuracao.ini');
  Server      := ArquivoIni.ReadString('conexao','server','');
  Database    := ArquivoIni.ReadString('conexao','database','');
  User        := ArquivoIni.ReadString('conexao','username','');
  Port        := ArquivoIni.ReadString('conexao','port','');
  Password    := ArquivoIni.ReadString('conexao','password','');
  Password    := ArquivoIni.ReadString('conexao','pathdll','');

  Driver      := 'MYSQL';

  try

    {

    }


    Connection  := TFDConnection.Create(nil);

     FDPhysMySQLDriverLink := TFDPhysMySQLDriverLink.create(nil);
     FDGUIxWaitCursor       := TFDGUIxWaitCursor.Create(nil);

     FDPhysMySQLDriverLink.VendorLib := pathDll;

    Connection.LoginPrompt := false;
    Connection.Params.Clear;
    Connection.Params.Add('DriverID='+Driver);
    Connection.Params.Add('Database='+Database);
    Connection.Params.Add('Password='+Password);
    Connection.Params.Add('User_name='+User);
    Connection.Params.Add('Server='+Server);
     Connection.Params.Add('Port='+Port);


    Connection.Open() ;

    Query  := TFDQuery.Create(nil);
    Query.Connection := Connection;

  except

     on E:exception do
     begin

        Connection.Free;
        FDPhysMySQLDriverLink.Free;
        FDGUIxWaitCursor.Free;
        Query.Free;



     end;

  end;



end;

destructor Tconnect.destroy;
begin

  Connection.Free;
  Fquery.Free;
  FDPhysMySQLDriverLink.Free;
  FDGUIxWaitCursor.Free;

  inherited;
end;

function Tconnect.ExecSql(sql: string) : Response;
begin

   try

     fquery.SQL.Clear;
     fquery.SQL.Add(sql);
     fquery.ExecSQL;

     Result.Success := true;
     Result.Message := 'Executado com sucesso';

   except

     on E:exception do
     begin

      Result.Success := false;
      Result.Message := e.Message;

     end;

   end;


end;

procedure Tconnect.SetQuery(const Value: TFdQuery);
begin
  FQuery := Value;
end;

end.
