unit UseCaseCliente;

interface


uses uCliente, system.SysUtils, uResponse, uConnect, uDtoCliente,
system.Generics.Collections;


 type TUseCaseCliente = class


  private
    Connect: Tconnect;
    FLista: Tlist<Tcliente>;
    procedure SetLista(const Value: TObjectList<Tcliente>);


  public

  function Cadastrar(cliente : TCliente)  : Response;
  function Alterar(cliente : TCliente)    : Response;
  function Excluir(codigo : integer)      : Response;
  function Consultar(dto : DtoCliente)    : TObjectList<Tcliente>;
  function ConsultarId(codigo : integer) : Tcliente;

   property Lista : TObjectList<Tcliente> read FLista write SetLista;


  constructor create;
  destructor Destroy;override;



 end;

implementation

{ UseCaseCliente }

function TUseCaseCliente.Alterar(cliente: TCliente): Response;
var
 sql : string;
 retorno : Response;
begin
   sql := ' update clientes set ' +
          ' nome = '   +  Quotedstr(cliente.Nome) + ',' +
          ' cidade = ' +  Quotedstr(cliente.Cidade) + ',' +
          ' uf = '     +  Quotedstr(cliente.Uf) +
          ' where codigo = ' +  intToStr(Cliente.Codigo);


  retorno := connect.ExecSql(sql) ;

  if retorno.Success then
  begin
    result.Success := true;
    result.Message := 'Alterado com sucesso';
  end else
  begin
    result := retorno;
  end;


end;

function TUseCaseCliente.Cadastrar(cliente: TCliente): Response;
var
 Sql : string;
 retorno :Response;
begin

   sql := ' Insert Into clientes '+
          '(nome,cidade,uf)  values (' +

          Quotedstr(cliente.Nome) +
          Quotedstr(cliente.Cidade) +
          Quotedstr(cliente.Uf) +  ')';


  retorno := connect.ExecSql(sql) ;

  if retorno.Success then
  begin
    result.Success := true;
    result.Message := 'Cadastrado com sucesso';
  end else
  begin
    result := retorno;
  end;


end;

function TUseCaseCliente.Consultar(dto: DtoCliente): TObjectList <Tcliente>;
var
 sql : string;
begin

   sql := 'select * from clientes where 1 = 1 ' ;

   if Dto.Codigo > 0 then
   begin
     sql := sql  +  ' and codigo = ' + inttostr(dto.codigo);
   end else
   begin

      if dto.Nome <> '' then
      begin
        sql := Sql  + ' and nome like ' + Quotedstr('%' + dto.Nome + '%');
      end;

      if Dto.Cidade <> '' then
      begin
        sql := Sql  + ' and documento like ' + Quotedstr('%' + dto.cidade + '%');
      end;

      if Dto.Cidade <> '' then
      begin
        sql := Sql  + ' and documento like ' + Quotedstr('%' + dto.cidade + '%');
      end;

   end;


   if connect.Consulta(sql).Success then
   begin

   end;


end;

function TUseCaseCliente.ConsultarId(codigo: integer): Tcliente;
begin

end;

constructor TUseCaseCliente.create;
begin

 Connect := Tconnect.Create;

end;

destructor TUseCaseCliente.Destroy;
begin

  Connect.Free;

  inherited;
end;

function TUseCaseCliente.Excluir(codigo: integer): Response;
var
 sql : string;
 retorno : Response;
begin
  sql := 'delete from cliente '+
          'where codigo = '  +  intToStr(codigo);

   retorno := connect.ExecSql(sql) ;

  if retorno.Success then
  begin
    result.Success := true;
    result.Message := 'Excluído com sucesso';
  end else
  begin
    result := retorno;
  end;

end;


procedure TUseCaseCliente.SetLista(const Value: TObjectList<Tcliente>);
begin
  FLista := Value;
end;

end.
